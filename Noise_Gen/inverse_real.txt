#include <gsl/gsl_fft_real.h>
#include <gsl/gsl_fft_halfcomplex.h>

#include <vector>

void Inverse::FFTInverse(std::vector<double> frequency, std::vector<double> amplitude){


	int N = amplitude.size();

	//double size of amplitude so as to account for non existent complex parts
	std::vector<double>::iterator it;
	it  = amplitude.end();
	amplitude.insert (it,N,0.0);
	
	N = amplitude.size();	
	
	
	//Allocateing a work space and look up tables for the gsl fft function
	gsl_fft_real_workspace* realWS = gsl_fft_real_workspace_alloc(N);
	gsl_fft_halfcomplex_wavetable* halfcompWT = gsl_fft_halfcomplex_wavetable_alloc(N);

	gsl_fft_halfcomplex_inverse(&amplitude[0], 1, N, halfcompWT, realWS);
	
	gsl_fft_real_workspace_free(realWS);
	gsl_fft_halfcomplex_wavetable_free(halfcompWT);

	
	//Remove 0s from array?

	
	//convert frequency into time (t=1/f)
	int Nf = frequency.size();

	for(int i=0; i<Nf; i++){
		If (frequency[i] =! 0){
			frequency[i] = 1/frequency[i];
		}
	}
	//is this right??????

	return;
}